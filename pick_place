#!/usr/bin/env python3
from sensor_msgs.msg import JointState
import time
import rospy
import moveit_commander
import numpy as np
from tf import transformations as T
from visualization_msgs.msg import Marker

from pddlstream.algorithms.meta import solve  # type: ignore
from pddlstream.utils import read  # type: ignore
from pddlstream.language.generator import from_fn, from_list_fn, from_gen_fn  # type: ignore
from pddlstream.language.constants import PDDLProblem  # type: ignore

from primitives import Conf
from stream import (
    get_arm_motion_gen,
    get_grasp_gen,
    get_ik_fn,
    get_base_motion_gen,
)
from tmc_control_msgs.msg import GripperApplyEffortAction, GripperApplyEffortGoal
from geometry_msgs.msg import PoseStamped, Pose
from control_msgs.msg import GripperCommandAction, GripperCommandGoal
from gazebo_msgs.srv import GetModelState
import hsrb_interface

GRASP_FORCE = 0.2
HAND_TF = "hand_palm_link"

def add_object(scene, object_name):
    rospy.wait_for_service("/gazebo/get_model_state")
    get_state = rospy.ServiceProxy("/gazebo/get_model_state", GetModelState)
    state = get_state(object_name, "")

    pose = state.pose
    pose.position.z = pose.position.z + 0.105

    pose_stamped = PoseStamped()
    pose_stamped.header.frame_id = "map"
    pose_stamped.pose = pose

    if object_name == "ycb_003_cracker_box":
        dimensions = (0.05, 0.14, 0.19)
        pose_stamped.pose.position.z += 0.05
    elif object_name == "kitchen_table":
        table_height = 0.68
        pose_stamped.pose.position.z = table_height / 2
        dimensions = (0.68, 1.13, table_height)
    else:
        dimensions = (0.1, 0.1, 0.1)
    scene.add_box(object_name, pose_stamped, dimensions)
    return pose_stamped


def post_process(whole_body, arm, plan):
    for i, (name, args) in enumerate(plan):
        rospy.loginfo("Step %d: %s %s", i, name, args)
        if name == "move_base":
            q1, t, q2 = args
            trajectory = t.commands[0]
            rospy.loginfo("Executing move base plan")
            whole_body.execute(trajectory.moveit_plan)

        elif name == "move_arm":
            a, q1, t, q2 = args
            rospy.loginfo("Executing move arm plan")
            arm.execute(trajectory.moveit_plan)

        elif name == "pick":
            _, obj, pose, grasp, q, bq = args
            if hasattr(bq, "moveit_plan") and bq.moveit_plan is not None:
                rospy.loginfo("Executing move base plan of the pick action")
                whole_body.execute(bq.moveit_plan)
                rospy.sleep(0.5)


def main():
    rospy.init_node("tamp")

    while not rospy.is_shutdown():
        try:
            arm_group = moveit_commander.MoveGroupCommander("arm", wait_for_servers=0.0)
            whole_body = moveit_commander.MoveGroupCommander("whole_body", wait_for_servers=0.0)
            # base_group = moveit_commander.MoveGroupCommander("base", wait_for_servers=0.0)
            arm_group.set_pose_reference_frame("base_link")
            whole_body.set_pose_reference_frame("map")
            # base_group.set_pose_reference_frame("map")
            scene = moveit_commander.PlanningSceneInterface()

            whole_body.allow_replanning(True)
            whole_body.set_planning_time(10)
            whole_body.set_max_velocity_scaling_factor(0.7)
            end_effector = whole_body.get_end_effector_link()
            
            break
        except RuntimeError as e:
            print("Failed to launch, retrying ", e)
            rospy.sleep(1.0)

    robot_state = moveit_commander.RobotState()
    joint_state = rospy.wait_for_message("/hsrb/joint_states", JointState, timeout=1.0)
    robot_state.joint_state = joint_state
    whole_body.set_start_state(robot_state)

    arm_joints = [
        "arm_lift_joint",
        "arm_flex_joint",
        "arm_roll_joint",
        "wrist_flex_joint",
        "wrist_roll_joint",
        "wrist_ft_sensor_frame_joint",
    ]
    base_joint = "world_joint"
    # Get current arm configuration for start
    current_joints = arm_group.get_current_joint_values()
    start_arm_conf = Conf(arm_group, arm_joints, current_joints)

    start_base_values = [0,0,0]
    start_base_conf = Conf(whole_body, [base_joint], start_base_values)

    object_name = "ycb_003_cracker_box"
    obj_pose = add_object(scene, object_name)
    # add_object(scene, 'kitchen_table')

    base_motion_gen = get_base_motion_gen(whole_body, robot_state)
    arm_motion_gen = get_arm_motion_gen(whole_body, robot_state)
    grasp_gen = get_grasp_gen(whole_body, obj_pose)
    ik_fn = get_ik_fn(whole_body, arm_group, robot_state)

    domain_pddl = read(
        "/home/rchome/workspaces/raghav_ws/src/villa_tamp/src/pddl/pick_place_domain.pddl"
    )
    stream_pddl = read(
        "/home/rchome/workspaces/raghav_ws/src/villa_tamp/src/pddl/pick_place_stream.pddl"
    )

    init = [
        # Arm
        ("Arm", "arm"),
        ("ArmConf", start_arm_conf),
        ("AtArmConf", "arm", start_arm_conf),
        ("HandEmpty",),

        # Base
        ("BConf", start_base_conf),
        ("AtBConf", start_base_conf),

        # Receptacle
        ("Table", "kitchen_table"),

        # Object
        ("Object", object_name),
        ("Pose", object_name, obj_pose.pose),
        ("AtPose", object_name, obj_pose.pose),
        ("Graspable", object_name),
        ("OnTable", object_name, "kitchen_table"),
        ("Clear", object_name),
    ]
    goal = ("Holding", object_name)

    stream_map = {
        "plan-base-motion": from_fn(base_motion_gen),
        "plan-arm-motion": from_fn(arm_motion_gen),
        "sample-grasp": from_list_fn(grasp_gen),
        "inverse-kinematics": from_gen_fn(ik_fn),
    }

    # Create and solve problem
    pddl_problem = PDDLProblem(domain_pddl, {}, stream_pddl, stream_map, init, goal)
    solution = solve(pddl_problem)
    if solution is None:
        rospy.loginfo("No solution found")
        return

    # Execute the solution
    plan, cost, evaluations = solution
    if plan is None:
        rospy.loginfo("Failed to find a plan")
        return
    
    rospy.loginfo("Executing the plan: %s", plan)


if __name__ == "__main__":
    main()
