#!/usr/bin/env python3

import rospy
import moveit_commander
import numpy as np
from tf import transformations as T

from pddlstream.algorithms.meta import solve
from pddlstream.utils import read
from pddlstream.language.generator import from_fn
from pddlstream.language.constants import PDDLProblem

from primitives import Conf
from stream import get_arm_motion_gen
from sensor_msgs.msg import JointState

def main():
    rospy.init_node("tamp")
    while not rospy.is_shutdown():
        try:
            arm_group = moveit_commander.MoveGroupCommander("arm", wait_for_servers=0.0)
            arm_group.set_pose_reference_frame("base_link")
            scene = moveit_commander.PlanningSceneInterface()
            break
        except RuntimeError as e:
            print("Failed to launch, retrying ", e)
            rospy.sleep(1.0)

    # Create problem instance and robot command interface
    robot = arm_group  # This represents our robot interface

    arm_joints = [
        "arm_lift_joint",
        "arm_flex_joint",
        "arm_roll_joint",
        "wrist_flex_joint",
        "wrist_roll_joint",
        "wrist_ft_sensor_frame_joint",
    ]

    # Get current arm configuration for start
    current_joints = arm_group.get_current_joint_values()
    start_values = current_joints
    joint_limits = {
        "arm_lift_joint": (0.0, 0.69),  # in meters
        "arm_flex_joint": (-2.62, 0.0),  # in radians
        "arm_roll_joint": (-2.09, 3.84),  # in radians
        "wrist_flex_joint": (-1.92, 1.92),  # in radians
        "wrist_roll_joint": (-2.09, 3.84),  # in radians
        "wrist_ft_sensor_frame_joint": (-3.05, 3.05),  # in radians
    }

    # Generate a reasonable random goal configuration
    goal_values = []
    for joint in arm_joints:
        min_val, max_val = joint_limits[joint]
        random_val = np.random.uniform(min_val, max_val)
        goal_values.append(random_val)

    robot_state = moveit_commander.RobotState()
    joint_state = rospy.wait_for_message("/hsrb/joint_states", JointState, timeout=1.0)
    robot_state.joint_state = joint_state
    robot.set_start_state(robot_state)
    motion_gen = get_arm_motion_gen(arm_group, robot_state)

    domain_pddl = read(
        "/home/rchome/workspaces/raghav_ws/src/villa_tamp/src/pddl/domain_arm.pddl"
    )
    stream_pddl = read(
        "/home/rchome/workspaces/raghav_ws/src/villa_tamp/src/pddl/stream_arm.pddl"
    )

    start_conf = Conf(arm_group, arm_joints, start_values)
    goal_conf = Conf(arm_group, arm_joints, goal_values)

    init = [
        ("Arm", "arm"),
        ("ArmConf", start_conf),
        ("ArmConf", goal_conf),
        ("AtArmConf", "arm", start_conf),
    ]
    goal = ("AtArmConf", "arm", goal_conf)

    stream_map = {"plan-arm-motion": from_fn(motion_gen)}

    # Create and solve problem
    pddl_problem = PDDLProblem(domain_pddl, {}, stream_pddl, stream_map, init, goal)
    solution = solve(pddl_problem)

    if solution is None:
        rospy.loginfo("No solution found")
        return

    # Execute the solution
    plan, cost, evaluations = solution
    if plan is None:
        rospy.loginfo("Failed to find a plan")
        return
    for name, args in plan:
        if name == "move_arm":
            a, q1, t, q2 = args

            trajectory = t.commands[0]
            if trajectory.moveit_plan is not None:
                robot.execute(trajectory.moveit_plan)
            else:
                # Set initial target
                joint_values = [
                    q1.values[0],  # x
                    q1.values[1],  # y
                    q1.values[2],  # theta
                ]
                robot.set_joint_value_target("world_joint", joint_values)
                success = robot.go(wait=True)
                if not success:
                    rospy.logwarn("Failed to execute the plan")
                    return
        else:
            import pdb; pdb.set_trace()


if __name__ == "__main__":
    main()
